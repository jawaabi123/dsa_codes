question: https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/
1)brute:

#include <bits/stdc++.h>
using namespace std;

class Solution
{
public:
    vector<int> searchRange(vector<int>& nums, int target)
    {
        // Initialize variables to store first and last occurrences
        int first = -1, last = -1;
        vector<int> ans;

        // Iterate through the array
        for (int i = 0; i < nums.size(); i++) {
            // Check if current element is the target
            if (nums[i] == target) {
                if (first == -1)   first = i; 
                last = i; 
            }
        }

        // Store the results in the answer vector
        ans.push_back(first);
        ans.push_back(last);
        return ans;
    }
};

int main()
{
    vector<int> nums = {5, 7, 7, 8, 8, 10};
    int target = 8;

    // Create an instance of the Solution class
    Solution sol;

    // Function call to find the first and last occurrences
    vector<int> result = sol.searchRange(nums, target);

    cout << "The first and last occurrences are at indices: " 
         << result[0] << " and " << result[1] << "\n";

    return 0;
}
2)optimal app:
class Solution{
public:
    vector<int> searchRange(vector<int> &nums, int target) 
    {
        int left=0;
        int right=nums.size()-1;
        int first=-1;
        while(left<=right)//loop to find first occurence of element
        {
            int mid=(left+right)/2;
            if(nums[mid]<target)left=mid+1;
            else if(nums[mid]>target)right=mid-1;
            else if(nums[mid]==target)
            {
                if(first==-1 || mid<first)first=mid;
                right=mid-1;
            }
        }
        left=0;
        right=nums.size()-1;
        int last=-1;
        while(left<=right)//loop to find last occurence of element
        {
            int mid=(left+right)/2;
            if(nums[mid]<target)left=mid+1;
            else if(nums[mid]>target)right=mid-1;
            else if(nums[mid]==target)
            {
                if(last==-1 || mid>last)last=mid;
                left=mid+1;
            }
        }
        return {first,last};
    }
};

brute1:(to rotate right)
#include<bits/stdc++.h>
using namespace std;
class Solution {
public:
    void rotate(vector<int>& nums, int k) 
    {
        vector<int>ans(nums.size()); 
        int n=nums.size();
        for(int i=0;i<nums.size();i++)
        {
            if(i+k<=n-1) ans[i+k]=nums[i];
            ans[(i+k)%n]=nums[i]; 
        }
        for(int i=0;i<ans.size();i++)
        {
            cout<<ans[i]<<" ";
        }
    }
};
int main()
{
    vector<int>nums;
    for(int i=0;i<6;i++)
    {
        nums.push_back(i+1);
    }
    Solution obj;
    obj.rotate(nums,3);
    return 0;
}
(rotate left)
2)brute2:
class Solution {
public:
    void rotateArray(vector<int>& nums, int d) 
    {
        int n=nums.size();
        d=d%n;
        vector<int>arr(d);
        for(int i=0;i<d;i++)
        {
            arr[i]=nums[i];
        }
        for(int i=d;i<n;i++)
        {
            nums[i-d]=nums[i];
        }
        for(int i=n-d;i<n;i++)
        {
            nums[i]=arr[i-(n-d)];
        }
    }
};
3)optimal:
class Solution {
public:
    void rot(int start,int end,vector<int>& nums)
    {
        while(start<end)
        {
            swap(nums[start],nums[end]);
            start++;
            end--;
        }
    }
    void rotateArray(vector<int>& nums, int k) 
    {
         k=k%(nums.size());
         rot(0,k-1,nums);
         rot(k,nums.size()-1,nums);
         rot(0,nums.size()-1,nums);
    }
};

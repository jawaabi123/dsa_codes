https://www.geeksforgeeks.org/problems/implement-atoi/1?utm_source=geeksforgeeks&utm_medium=ml_article_practice_tab&utm_campaign=article_practice_tab

#include <iostream>
#include <string>
using namespace std;

class Solution {
public:
    // Recursive function to convert string to integer
    int stringToInt(string s, int index, bool isNegative) {
        // Base case: If we reach the end of the string, return 0
        if (index == s.length()) {
            return 0;
        }

        char currentChar = s[index];

        // If the character is not a digit, return -1 (invalid conversion)
        if (currentChar < '0' || currentChar > '9') {
            return -1;
        }

        // Convert current character to digit
        int digit = currentChar - '0';

        // Recursively calculate the result for the rest of the string
        int result = stringToInt(s, index + 1, isNegative);

        // If at any point we get an invalid result, propagate the -1 upwards
        if (result == -1) {
            return -1;
        }

        // Calculate the current number (multiply by 10 to shift digits)
        return digit * pow10(s.length() - index - 1) + result;
    }

    // Helper function to calculate powers of 10 recursively
    int pow10(int exponent) {
        if (exponent == 0) return 1;
        return 10 * pow10(exponent - 1);
    }

    // Main function to validate input and handle signs
    int convertStringToInt(string s) {
        // Handle empty string
        if (s.empty()) return -1;

        // Handle signs
        bool isNegative = false;
        int startIndex = 0;

        if (s[0] == '-') {
            isNegative = true;
            startIndex = 1;
        } else if (s[0] == '+') {
            startIndex = 1;
        }

        // Recursive call to process the string
        int result = stringToInt(s, startIndex, isNegative);

        // If conversion failed, return -1
        if (result == -1) {
            return -1;
        }

        // Apply the sign if needed
        return isNegative ? -result : result;
    }
};

int main() {
    Solution sol;
    
    string s1 = "-12345";
    cout << "Result for " << s1 << ": " << sol.convertStringToInt(s1) << endl; // Output: -12345
    
    string s2 = "54321";
    cout << "Result for " << s2 << ": " << sol.convertStringToInt(s2) << endl; // Output: 54321
    
    string s3 = "12a45"; // Invalid string
    cout << "Result for " << s3 << ": " << sol.convertStringToInt(s3) << endl; // Output: -1
    
    return 0;
}

https://leetcode.com/problems/longest-consecutive-sequence/description/

1)brute:

bool linearSearch(vector<int>& a, int num) 
{
        int n = a.size(); 
        // Traverse through the array 
        for (int i = 0; i < n; i++) {
            if (a[i] == num)
                return true;
        }
        return false;
    }

public:
    // Function to find the longest consecutive sequence
    int longestConsecutive(vector<int>& nums) {
        // If the array is empty
        if (nums.size() == 0) {
            return 0;
        }
        int n = nums.size();
        // Initialize the longest sequence length
        int longest = 1; 

        // Iterate through each element in the array
        for (int i = 0; i < n; i++) {
            // Current element
            int x = nums[i]; 
            // Count of the current sequence
            int cnt = 1; 

            // Search for consecutive numbers
            while (linearSearch(nums, x + 1) == true) {
                // Move to the next number in the sequence
                x += 1; 
                // Increment the count of the sequence
                cnt += 1; 
            }

            // Update the longest sequence length found so far
            longest = max(longest, cnt);
        }
        return longest;
    }
};

int main() {
    vector<int> a = {100, 4, 200, 1, 3, 2};

    // Create an instance of the Solution class
    Solution solution;

    // Function call for longest consecutive sequence
    int ans = solution.longestConsecutive(a);
    cout << "The longest consecutive sequence is " << ans << "\n"; 
    return 0;
}

2)better approach code:T.C-(O(nlogn)+O(n))
class Solution {
public:

    int longestConsecutive(vector<int>& nums) 
    {
        sort(nums.begin(),nums.end()); //O(nlogn)
        int max_count=0;
        int count=0;
        for(int i=0;i<nums.size();i++) //O(n)
        {
            if(i != nums.size()-1 && (nums[i+1]-nums[i]==1) )
            {
                count++;
            }
            if(nums[i+1]-nums[i] != 1)
            {
                max_count=max(count,max_count);
                count=0;
            }
        }
        if(count>max_count)
        {
            return count+1;
        }
        return max_count+1;
    }
};

3)optimal approach code:

class Solution {
public:
    int longestConsecutive(vector<int>& nums) 
    {
        set<int>longestseq;
        for(int i=0;i<nums.size();i++)
        {
            longestseq.insert(nums[i]);
        }
        int max_count=1;
        int count=1;
        for(auto it:longestseq)
        {
            if(longestseq.find(it-1)==longestseq.end())
            {
               int var=it;
               while(longestseq.find(var)!=longestseq.end())
               {
                     count++;
                     var++;  
               }
               max_count=max(max_count,count);
               count=1;
            }
        }
        return max_count-1;
    }
};

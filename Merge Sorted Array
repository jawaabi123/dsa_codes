https://takeuforward.org/plus/data-structures-and-algorithm/arrays/faqs-hard/merge-two-sorted-arrays-without-extra-space/submissions

1)optimal_approach-1:
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) 
    {
        int left = m - 1;
        int right = 0;

        // Move larger elements from nums1 to nums2
        while (left >= 0 && right < n) {
            if (nums1[left] > nums2[right]) {
                swap(nums1[left], nums2[right]);
                left--;
                right++;
            } else {
                break;
            }
        }

        // Sort both parts to ensure the final merged array is sorted
        sort(nums1.begin(), nums1.begin() + m);
        sort(nums2.begin(), nums2.end());

        // Copy the sorted nums2 elements to the end of nums1
        for (int i = 0; i < n; i++) {
            nums1[m + i] = nums2[i];
        }
        
    }
};

2)opt_app-2:

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) 
    {
        int gap=((m+n)/2) +((m+n)%2);
       
        while(gap>0)
        {
            int left=0;
            int right=left+gap;
            while(right<(n+m))
            {
              if(left<m && right<m) //both pointers in nums1 vector
                {
                    if(nums1[left]>nums1[right])
                    {
                       swap(nums1[left],nums1[right]);
                    }
                    left++;
                    right++;
                }
                else if(left<m && right>=m) //left in nums1, right in nums2
                {
                    if(nums1[left]>nums2[right-m])
                    {
                       swap(nums1[left],nums2[right-m]);
                    }
                    left++;
                    right++;
                }
                else
                {
                    if(nums2[left-m]>nums2[right-m])
                    {
                    swap(nums2[left-m],nums2[right-m]);
                    }
                    left++;
                    right++;
                }
                //left++;
                //right++;
            }
            if(gap==1)
            {
                break;
            }
            gap=(gap/2) +(gap%2);
        }
        for (int i = m; i < m + n; i++) {
            nums1[i] = nums2[i - m];
        }
    }
};
